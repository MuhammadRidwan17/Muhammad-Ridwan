#include <iostream>
#include <queue>
#include <vector>

using namespace std;

// Struct Pelanggan untuk menyimpan nomor antrian dan waktu layanan dalam menit
struct Pelanggan {
    int nomor_antrian;   // Menyimpan nomor urut antrian pelanggan
    int waktu_layanan;   // Menyimpan durasi layanan yang dibutuhkan pelanggan dalam menit
};

// Class Queue untuk mengelola antrian
class Queue {
private:
    queue<Pelanggan> pelangganQueue;   // Menggunakan library queue untuk menyimpan antrian pelanggan

public:
    // Fungsi untuk menambahkan pelanggan ke antrian
    void enqueue(Pelanggan p) {
        pelangganQueue.push(p);
    }

    // Fungsi untuk mengambil pelanggan dari antrian
    Pelanggan dequeue() {
        Pelanggan depan = pelangganQueue.front();
        pelangganQueue.pop();
        return depan;
    }

    // Mengecek apakah antrian kosong
    bool isEmpty() {
        return pelangganQueue.empty();
    }

    // Mengembalikan ukuran antrian saat ini
    int size() {
        return pelangganQueue.size();
    }
};

// Fungsi untuk mensimulasikan proses antrian dengan 3 loket layanan
void simulasiAntrian(Queue &antrian, int waktu_layanan[], int jumlah_loket) {
    vector<int> waktu_tunggu(jumlah_loket, 0);   // Waktu tunggu untuk setiap loket
    int total_waktu_tunggu = 0;   // Total waktu tunggu untuk semua pelanggan
    int pelanggan_terlayani = 0;  // Menyimpan jumlah pelanggan yang sudah dilayani

    // Looping sampai antrian kosong
    while (!antrian.isEmpty()) {
        // Distribusi pelanggan ke masing-masing loket
        for (int i = 0; i < jumlah_loket; ++i) {
            if (antrian.isEmpty()) break;   // Berhenti jika antrian sudah kosong

            Pelanggan p = antrian.dequeue();   // Mengambil pelanggan dari antrian
            waktu_tunggu[i] += p.waktu_layanan;   // Update waktu tunggu loket
            total_waktu_tunggu += waktu_tunggu[i]; // Tambahkan ke total waktu tunggu
            pelanggan_terlayani++;   // Increment jumlah pelanggan yang dilayani

            // Menampilkan informasi pelanggan yang sedang dilayani
            cout << "Pelanggan nomor antrian " << p.nomor_antrian 
                 << " dilayani di loket " << (i + 1) 
                 << " dengan waktu layanan " << p.waktu_layanan 
                 << " menit." << endl;
        }
    }

    // Menghitung rata-rata waktu tunggu
    int rata_rata_waktu_tunggu = (pelanggan_terlayani > 0) ? total_waktu_tunggu / pelanggan_terlayani : 0;
    int sisa_antrian = antrian.size(); // Menyimpan sisa antrian setelah semua dilayani

    // Menampilkan statistik hasil simulasi
    cout << "\nStatistik:" << endl;
    cout << "Rata-rata waktu tunggu: " << rata_rata_waktu_tunggu << " menit" << endl;
    cout << "Pelanggan terlayani: " << pelanggan_terlayani << endl;
    cout << "Sisa antrian: " << sisa_antrian << endl;
}

int main() {
    Queue antrian;               // Membuat objek antrian
    int jumlah_pelanggan, jumlah_loket = 3;

    // Menambahkan pelanggan ke antrian
    cout << "Masukkan jumlah pelanggan: ";
    cin >> jumlah_pelanggan;

    for (int i = 1; i <= jumlah_pelanggan; ++i) {
        Pelanggan p;
        p.nomor_antrian = i;    // Memberikan nomor urut antrian ke pelanggan
        cout << "Masukkan waktu layanan untuk pelanggan nomor " << i << " (dalam menit): ";
        cin >> p.waktu_layanan; // Memasukkan durasi waktu layanan pelanggan
        antrian.enqueue(p);     // Menambahkan pelanggan ke antrian
    }

    // Menjalankan simulasi antrian
    simulasiAntrian(antrian, nullptr, jumlah_loket);

    return 0;
}
